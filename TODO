TODO / NOTES
==============================================================================

- periodic pull?
- push if local repo ahead of remote?
    - even if working dir is clean
- daemonize
- upstart/launchd scripts
- documentation
- tidy up code
    - headers
- tests?
- git gc --aggressive
    - periodically?
    - every commit?


General
------------------------------------------------------------------------------
- Python
    - pynotify: linux
    - fsevents: mac
    - xxx: windows (?)

- Git
    - Dulwich?
    - GitPython?
    - wrap system calls to git executable?

- or bzr/hg?
    - better python integration?

- github?
    - could be any remote.
    - assumes ssh keys are in place
    

Configuration
------------------------------------------------------------------------------
- Directory:
    - /foo/bar

- Remote:
    - https://github.com/user/bar.git

- Other:
    - commit_after_n_changes: 3
        - commit after every 3 changes to any files in the watched directory.
    - push_after_n_commits: 1
        - push after every commit.
    - repack_after_n_commits: 20
        - repack the local repository after 20 commits
    - conflict_email_address: user@foo.com
        - email address to notify in case of conflict or git error
        - some other notification?
            - growl or similar local notification?
            - native notification, e.g. toolbar/taskbar/etc?
            - sms?
            - log file
                - YES but maybe not the only notification
            - jabber
    - XXX


Process
------------------------------------------------------------------------------
- Create directory _DIR_
- Init git repository
- Add remote origin
- Start (daemon?)
- Read in and parse configuration
- Start watching _DIR_
- On change:
    - modified_files_list = get_modified_or_new_files()
    - git add _DIR_
    - git commit -m "syncilainen: %s: %s" % (date_str, modified_files_list)
    - git push origin

- should there be a periodic pull?
- how to get around asking for private key passphrase?

- XXX: how to manage conflicts?
    - could each 'source' have it's own branch?
        - merge in periodically?
        - would that solve the underlying issue?
    - notify somehow?
    - force overwrite?
        - this could be dodgey

Conflicts
------------------------------------------------------------------------------
1) add, commit all
- push
    - OK -> notify
    - NOT_OK [rejected]
        - git fetch
            - git merge
                - OK -> notify
                - NOT_OK: CONFLICT
                    - git ls_files -u
                    - git checkout --theirs file.ext
                        - mv file.ext sha1.file.ext
                    - git checkout --ours file.ext
                    - GOTO 1)

